eq x y =
  case x of {
    A -> eqA y;
    B -> eqB y;
    C -> eqC y;
  };

eqA y = 
  case y of {
    A -> T;
    B -> F;
    C -> F;
  };
eqB y = 
  case y of {
    A -> F;
    B -> T;
    C -> F;
  };

eqC y = 
  case y of {
    A -> F;
    B -> F;
    C -> T;
  };

if c x y =
  case c of {
    T -> x;
    F -> y;
  };


match p s = m p s p s;

m pp ss op os =
  case pp of {
    Nil -> T;
    Cons p pp ->
      case ss of {
        Nil -> F;
        Cons s ss ->
          if (eq p s) (m pp ss op os) (n os op);
      };
  };

n os op =
  case os of {
    Nil -> F;
    Cons s ss -> m op ss op ss;
  };

matchAAB str = match (Cons A (Cons A (Cons B Nil))) str;


matchAAB2 str = mAAB str;

mAAB s = 
  case s of {
    Nil -> F;
    Cons s ss ->
      if (eq A s) (mAB ss) (mAAB ss);
  };

mAB s = 
  case s of {
    Nil -> F;
    Cons s ss ->
      if (eq A s) (mB ss) (mAAB ss);
  };

mB s = 
  case s of {
    Nil -> F;
    Cons s ss ->
      if (eq B s) T (if (eq A s) (mB ss) (mAAB ss));
  };



test: matchAAB (Cons A (Cons A (Cons A (Cons A (Cons A Nil)))));
test: matchAAB (Cons A (Cons A (Cons A (Cons B (Cons A Nil)))));
test: matchAAB (Cons A (Cons A (Cons B (Cons A (Cons A Nil)))));
test: matchAAB (Cons C (Cons A (Cons B (Cons A (Cons A (Cons B Nil))))));

test: matchAAB2 (Cons A (Cons A (Cons A (Cons A (Cons A Nil)))));
test: matchAAB2 (Cons A (Cons A (Cons A (Cons B (Cons A Nil)))));
test: matchAAB2 (Cons A (Cons A (Cons B (Cons A (Cons A Nil)))));
test: matchAAB2 (Cons C (Cons A (Cons B (Cons A (Cons A (Cons B Nil))))));


prove: matchAAB = matchAAB2;
